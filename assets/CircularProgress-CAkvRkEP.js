import{j as a}from"./jsx-runtime-D_zvdyIk.js";const u="_wrapper_kn0ga_1",d="_size_kn0ga_8",n={wrapper:u,size:d},p=s=>{switch(s){case"large":return{size:44,strokeWidth:4,radius:18};case"medium":return{size:36,strokeWidth:3,radius:14};case"small":return{size:28,strokeWidth:3,radius:10};default:return}},m=(s,e)=>{switch(s){case"large":return{fontSize:18,x:e<10?18:e<100?13:8,y:-16};case"medium":return{fontSize:14,x:e<10?15:e<100?11:7,y:-13};case"small":return{fontSize:10,x:e<10?12:e<100?9:6.5,y:-11};default:return}},l=({size:s="medium",progress:e=0,showProgress:c,progressText:i})=>{const r=p(s);if(!r)return null;const o=2*Math.PI*r.radius,t=r.size/2;return a.jsxs("svg",{className:n.wrapper,width:r.size,height:r.size,fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[a.jsx("circle",{cx:t,cy:t,r:r.radius,strokeOpacity:".1",strokeWidth:r.strokeWidth,fill:"none"}),a.jsx("circle",{fill:"none",cx:t,cy:t,r:r.radius,strokeWidth:r.strokeWidth,transform:"rotateX(180deg) translate(0, -56px)",strokeLinecap:"round",strokeDasharray:o,strokeDashoffset:o*((100-e)/100)}),c&&a.jsx("text",{className:n.size,...m(s,i||Math.floor(e)),children:i||Math.floor(e)})]})};try{l.displayName="CircularProgress",l.__docgenInfo={description:"Renders a circular progress indicator, useful for displaying loading states or progress metrics.\nThe component dynamically adjusts its size and stroke based on the provided `size` prop and visually represents\nthe `progress` prop as a percentage of the circle's circumference. The progress can be shown using `showProgress` prop.",displayName:"CircularProgress",props:{size:{defaultValue:{value:"medium"},description:"Specifies the size of the circular progress indicator. Can be 'small', 'medium', or 'large'.",name:"size",required:!1,type:{name:"enum",value:[{value:'"large"'},{value:'"small"'},{value:'"medium"'}]}},progress:{defaultValue:{value:"0"},description:"Current progress of the circular indicator, expressed as a percentage from 0 to 100.",name:"progress",required:!1,type:{name:"number"}},showProgress:{defaultValue:null,description:"Show progress from `progressText` or `Math.floor(progress)`",name:"showProgress",required:!1,type:{name:"boolean"}},progressText:{defaultValue:null,description:"",name:"progressText",required:!1,type:{name:"number"}}}}}catch{}export{l as C};
