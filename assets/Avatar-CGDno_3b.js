import{j as n}from"./jsx-runtime-D_zvdyIk.js";import{I as d}from"./Image-CAlrjYSA.js";import{c as p}from"./classNames-BjxpnYM-.js";import"./file-zip-BXERkKO-.js";import"./index-2yJIXLcc.js";import{T as r}from"./Typography-C9RDb2oI.js";const c="_wrapper_1kbf3_1",o={wrapper:c,"wrapper--withAcronym":"_wrapper--withAcronym_1kbf3_6"},l=({size:e,...a})=>{if(!e)return null;const t=typeof e=="string"?parseInt(e.replace(/[^0-9]/g,""),10):e;return t<=28?n.jsx(r,{variant:"caption",small:t<=24,weight:"light",caps:!0,...a}):t<=40?n.jsx(r,{variant:"headline",caps:!0,...a}):t<=48?n.jsx(r,{variant:"h4",weight:"light",caps:!0,...a}):n.jsx(r,{variant:"h1",weight:"light",caps:!0,...a})};try{l.displayName="AvatarAcronym",l.__docgenInfo={description:"",displayName:"AvatarAcronym",props:{size:{defaultValue:null,description:"",name:"size",required:!0,type:{name:"string | 20 | 24 | 28 | 40 | 48 | 96 | undefined"}},color:{defaultValue:null,description:"Determines the color of the text.",name:"color",required:!1,type:{name:"enum",value:[{value:'"inherit"'},{value:'"error"'},{value:'"header"'},{value:'"hint"'},{value:'"accent"'},{value:'"subtitle"'}]}},small:{defaultValue:null,description:"When true, reduce font-size of the component. Applies only for `subHeadline` and `caption`.",name:"small",required:!1,type:{name:"boolean"}},Component:{defaultValue:null,description:"Specifies the HTML tag or React component used to render the text, defaulting to `span`.",name:"Component",required:!1,type:{name:"ElementType"}},variant:{defaultValue:null,description:"Determines the component and styles of text: h1, h2, h3, h4, h5, h6, span .",name:"variant",required:!1,type:{name:"enum",value:[{value:'"text"'},{value:'"caption"'},{value:'"h1"'},{value:'"h2"'},{value:'"h3"'},{value:'"h4"'},{value:'"h5"'},{value:'"h6"'},{value:'"headline"'},{value:'"subHeadline"'}]}},weight:{defaultValue:null,description:"Controls the font weight of the text, with options ranging from light to bold.",name:"weight",required:!1,type:{name:"enum",value:[{value:'"bold"'},{value:'"light"'},{value:'"regular"'}]}},caps:{defaultValue:null,description:"If true, transforms the text to uppercase for stylistic emphasis.",name:"caps",required:!1,type:{name:"boolean"}},plain:{defaultValue:null,description:"When true, removes the default margins around the text, useful for inline styling or custom layouts.",name:"plain",required:!1,type:{name:"boolean"}},editableProps:{defaultValue:null,description:"",name:"editableProps",required:!1,type:{name:"{ enabled?: boolean; placeholder?: string; plain?: boolean | undefined; markdown?: boolean | undefined; } | undefined"}},markdown:{defaultValue:null,description:"Content to be displayed as HTML from Markdown string.",name:"markdown",required:!1,type:{name:"string"}}}}}catch{}const s=({className:e,acronym:a,fallbackIcon:t,size:i,...u})=>n.jsx(d,{className:p(o.wrapper,a&&o["wrapper--withAcronym"],e),fallbackIcon:a?n.jsx(l,{Component:"span",size:i,children:a}):t,size:i,...u});try{s.displayName="Avatar",s.__docgenInfo={description:"Renders an image with specific styles for an avatar presentation, including optional acronym display and badge support.\nUtilizes the `Image` component for core functionality, enhancing it with avatar-specific features like acronyms and badges.",displayName:"Avatar",props:{acronym:{defaultValue:null,description:"One or two letters to be shown as a placeholder. `fallbackIcon` will not be used if `acronym` is provided.",name:"acronym",required:!1,type:{name:"string"}},size:{defaultValue:null,description:"Specifies the size of the image, with a default of 40. Sizes are defined in pixels.",name:"size",required:!1,type:{name:"string | 20 | 24 | 28 | 40 | 48 | 96"}},fallbackIcon:{defaultValue:null,description:"An element (often an icon) displayed when the image fails to load or the `src` attribute is not provided.",name:"fallbackIcon",required:!1,type:{name:"ReactNode"}},children:{defaultValue:null,description:"Optional children to render within the image component's container.",name:"children",required:!1,type:{name:"ReactNode"}},badgeContent:{defaultValue:null,description:"Showing the page for image with presented content.",name:"badgeContent",required:!1,type:{name:"string | number"}}}}}catch{}export{s as A};
